#** 1.2.4.1 Merging MLB batters' data and calculating batters' AVG/OBP/SLG by different years
#** Used at Section 4.1
#** Merging of different years of batters
Allplayers_Batting <- rbind(Allplayers_Batting_2022, Allplayers_Batting_2021, Allplayers_Batting_2020, Allplayers_Batting_2019, Allplayers_Batting_2018)
#** Re-naming the column: name to avoid violating UTF-8 rule
names(Allplayers_Batting)[1] <- 'name'
#** Removing the needless variables
remove(Allplayers_Batting_2022, Allplayers_Batting_2021, Allplayers_Batting_2020, Allplayers_Batting_2019, Allplayers_Batting_2018)
#** Calculating batters' AVG by different years
(Allplayers_Batting_AVG <- aggregate(AVG~year, data = Allplayers_Batting, FUN = mean))
#** Calculating batters' OBP by different years
(Allplayers_Batting_OBP <- aggregate(OBP~year, data = Allplayers_Batting, FUN = mean))
#** Calculating batters' SLG by different years
(Allplayers_Batting_SLG <- aggregate(SLG~year, data = Allplayers_Batting, FUN = mean))
##* Ohtani Cutter's plate_x V.S plate_z by year
plot(type = 'p', Pitching_Ohtani$plate_x[Pitching_Ohtani$pitch_type == 'FC' & Pitching_Ohtani$year == '2018' ], Pitching_Ohtani$plate_z[Pitching_Ohtani$pitch_type == 'FC' & Pitching_Ohtani$year == '2018'], lty = 3, lwd = 1, xlim = c(-3,4.5), ylim = c(-2,7), col = 'red', pch = 5, xlab ='plate_x', ylab = 'plate_z', main ="Ohtani Cutter ball's plate_x V.S plate_z", cex.axis= 1.5, cex.lab= 1.5, cex.main =1.5 )
lines(type = 'p', Pitching_Ohtani$plate_x[Pitching_Ohtani$pitch_type == 'FC' & Pitching_Ohtani$year == '2019' ], Pitching_Ohtani$plate_z[Pitching_Ohtani$pitch_type == 'FC' & Pitching_Ohtani$year == '2019'], lty = 3, lwd = 1, col = 'orange', pch = 5, )
lines(type = 'p', Pitching_Ohtani$plate_x[Pitching_Ohtani$pitch_type == 'FC' & Pitching_Ohtani$year == '2020' ], Pitching_Ohtani$plate_z[Pitching_Ohtani$pitch_type == 'FC' & Pitching_Ohtani$year == '2020'], lty = 3, lwd = 1, col = 'gold1', pch = 5)
lines(type = 'p', Pitching_Ohtani$plate_x[Pitching_Ohtani$pitch_type == 'FC' & Pitching_Ohtani$year == '2021' ], Pitching_Ohtani$plate_z[Pitching_Ohtani$pitch_type == 'FC' & Pitching_Ohtani$year == '2021'], lty = 3, lwd = 1, col = 'limegreen', pch = 5)
lines(type = 'p', Pitching_Ohtani$plate_x[Pitching_Ohtani$pitch_type == 'FC' & Pitching_Ohtani$year == '2022' ], Pitching_Ohtani$plate_z[Pitching_Ohtani$pitch_type == 'FC' & Pitching_Ohtani$year == '2022'], lty = 3, lwd = 1, col = 'darkorchid2', pch = 5)
legend("topright", c("2018", "2019", "2020", "2021", "2022"), col = c("red", "orange", "gold1", "limegreen", 'darkorchid2'), lty = 3, lwd =1, pch = 5)
##* Ohtani Fast's pfx_x V.S pfx_z by year
plot(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FF' & Pitching_Ohtani$year == '2018' ], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FF' & Pitching_Ohtani$year == '2018'], lty = 3, lwd = 1, xlim = c(-1.5,0.5), ylim = c(0.5,2), col = 'red', pch = 5, xlab ='pfx_x', ylab = 'pfx_z', main ="Ohtani Fast ball's pfx_x V.S pfx_z", cex.axis= 1.5, cex.lab= 1.5, cex.main =1.5 )
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FF' & Pitching_Ohtani$year == '2019' ], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FF' & Pitching_Ohtani$year == '2019'], lty = 3, lwd = 1, col = 'orange', pch = 5, )
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FF' & Pitching_Ohtani$year == '2020' ], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FF' & Pitching_Ohtani$year == '2020'], lty = 3, lwd = 1, col = 'gold1', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FF' & Pitching_Ohtani$year == '2021' ], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FF' & Pitching_Ohtani$year == '2021'], lty = 3, lwd = 1, col = 'limegreen', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FF' & Pitching_Ohtani$year == '2022' ], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FF' & Pitching_Ohtani$year == '2022'], lty = 3, lwd = 1, col = 'darkorchid2', pch = 5)
legend("topright", c("2018", "2019", "2020", "2021", "2022"), col = c("red", "orange", "gold1", "limegreen", 'darkorchid2'), lty = 3, lwd =1, pch = 5)
##* Ohtani's Slider-ball's pitching average release speed and its standard deviation ##
par(mfrow = c(1,1))
plot(type = "b", Pitching_Ohtani_aggre$year[Pitching_Ohtani_aggre$pitch_type == 'SL'], Pitching_Ohtani_aggre$release_speed[Pitching_Ohtani_aggre$pitch_type == 'SL'], main = "Shohei Ohtani's Slider ball's \npitching speed(release)", xlab = 'Year', ylab = 'Release speed', lty = 3, lwd = 5, col = 'red', pch = 19, cex.axis= 1.5, cex.lab= 1.5, cex.main =1.5)
par(new = TRUE)
plot(type = "b", Pitching_Ohtani_aggre_sd$release_speed[Pitching_Ohtani_aggre_sd$pitch_type == 'SL'], ylim = c(0,10), main = '',xlab ='', ylab = '', xaxt = 'n', yaxt = 'n', lty = 3, lwd = 5, col = 'green', pch = 19)
axis(side = 4, cex.axis= 1.5, cex= 3)
mtext("Standard deviation", side = 4, line = -1.2, font = 1, cex = 1.5)
legend("topleft", c("Average speed", "Stand deviation of speed"), lty = 3, lwd = 5, col = c('red', 'green'), pch = 19 )
##* Ohtani's pfx_x V.S pfx_z
plot(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'CU'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'CU'], lty = 3, lwd = 1, ylim = c(-2,2.5), xlim = c(-2,2.3), col = 'red', pch = 5, xlab ='pfx_x', ylab = 'pfx_z', main ='pfx_x V.S pfx_z', cex.axis= 1.5, cex.lab= 1.5, cex.main =1.5 )
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FC'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FC'], lty = 3, lwd = 1, col = 'orange', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FF'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FF'], lty = 3, lwd = 1, col = 'gold1', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FS'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FS'], lty = 3, lwd = 1, col = 'limegreen', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'SL'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'SL'], lty = 3, lwd = 1, col = 'cyan4', pch = 5)
legend("bottomleft", c("Curve", "Cutter", "Fast", "Split-finger", "Slider"), col = c("red", "orange", "gold1", "limegreen", "cyan4"), lty = 3, lwd =1, pch = 5)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
Pitching_Ohtani_pfx
head(Pitching_Ohtani_pfx)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
head(Pitching_Ohtani_pfx)
(cl <- kmeans(Pitching_Ohtani_pfx, 5))
plot(Pitching_Ohtani_pfx, col = 1:5, pch = 19, cex = 2)
plot(Pitching_Ohtani_pfx, col = 1:5, cex = 1)
(cl <- kmeans(Pitching_Ohtani_pfx, 5))
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 5))
plot(Pitching_Ohtani_pfx, Pitching_Ohtani_pfx_cl$cluster)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 5))
plot(Pitching_Ohtani_pfx, Pitching_Ohtani_pfx_cl$cluster)
dim(Pitching_Ohtani_pfx)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 5))
plot(Pitching_Ohtani_pfx, Pitching_Ohtani_pfx_cl$cluster)
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$cluster, col = 1:6, pch = 19, cex = 2)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = 1:6, pch = 19, cex = 2)
points(Pitching_Ohtani_pfx_cl$centers, col = 1:6, pch = 19, cex = 2)
points(Pitching_Ohtani_pfx_cl$centers, col = 1:6, pch = 19, cex = 2)
points(Pitching_Ohtani_pfx_cl$centers, col = 1:6, pch = 19, cex = 2)
points(Pitching_Ohtani_pfx_cl$centers, col = 1:6, pch = 19, cex = 2)
points(Pitching_Ohtani_pfx_cl$centers, col = 1:6, pch = 19, cex = 2)
points(Pitching_Ohtani_pfx_cl$centers, col = 1:6, pch = 19, cex = 10)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = 1:6, pch = 8, cex = 5)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = 1:6, pch = 8, cex = 8)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = 1:6, pch = 23, cex = 8)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = 1:6, pch = 19, cex = 8)
points(Pitching_Ohtani_pfx_cl$centers, col = 1:6, pch = 19, cex = 4)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = 1:6, pch = 19, cex = 4)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = 1:6, pch = 19, cex = 2)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = virdis(6), pch = 19, cex = 2)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = virdis(6), pch = 19, cex = 8)
library(virdis)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = viridis(6), pch = 19, cex = 8)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = viridis(6), pch = 19, cex = 4)
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = viridis(6), pch = 19, cex = 2)
par(mfrow = c(1,2))
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = viridis(6), pch = 19, cex = 2)
##* Ohtani's pfx_x V.S pfx_z
plot(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'CU'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'CU'], lty = 3, lwd = 1, ylim = c(-2,2.5), xlim = c(-2,2.3), col = 'red', pch = 5, xlab ='pfx_x', ylab = 'pfx_z', main ='pfx_x V.S pfx_z', cex.axis= 1.5, cex.lab= 1.5, cex.main =1.5 )
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FC'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FC'], lty = 3, lwd = 1, col = 'orange', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FF'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FF'], lty = 3, lwd = 1, col = 'gold1', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FS'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FS'], lty = 3, lwd = 1, col = 'limegreen', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'SL'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'SL'], lty = 3, lwd = 1, col = 'cyan4', pch = 5)
legend("bottomleft", c("Curve", "Cutter", "Fast", "Split-finger", "Slider"), col = c("red", "orange", "gold1", "limegreen", "cyan4"), lty = 3, lwd =1, pch = 5)
par(mfrow = c(1,2))
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 6))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = viridis(6), pch = 19, cex = 2)
##* Ohtani's pfx_x V.S pfx_z
plot(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'CU'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'CU'], lty = 3, lwd = 1, ylim = c(-2,2.5), xlim = c(-2,2.3), col = 'red', pch = 5, xlab ='pfx_x', ylab = 'pfx_z', main ='pfx_x V.S pfx_z', cex.axis= 1.5, cex.lab= 1.5, cex.main =1.5 )
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FC'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FC'], lty = 3, lwd = 1, col = 'orange', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FF'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FF'], lty = 3, lwd = 1, col = 'gold1', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FS'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FS'], lty = 3, lwd = 1, col = 'limegreen', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'SL'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'SL'], lty = 3, lwd = 1, col = 'cyan4', pch = 5)
par(mfrow = c(1,1))
par(mfrow = c(1,2))
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani_pfx, 5))
plot(Pitching_Ohtani_pfx, col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = viridis(5), pch = 19, cex = 2)
##* Ohtani's pfx_x V.S pfx_z
plot(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'CU'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'CU'], lty = 3, lwd = 1, ylim = c(-2,2.5), xlim = c(-2,2.3), col = 'red', pch = 5, xlab ='pfx_x', ylab = 'pfx_z', main ='pfx_x V.S pfx_z', cex.axis= 1.5, cex.lab= 1.5, cex.main =1.5 )
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FC'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FC'], lty = 3, lwd = 1, col = 'orange', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FF'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FF'], lty = 3, lwd = 1, col = 'gold1', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FS'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FS'], lty = 3, lwd = 1, col = 'limegreen', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'SL'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'SL'], lty = 3, lwd = 1, col = 'cyan4', pch = 5)
par(mfrow = c(1,2))
Pitching_Ohtani_pfx <- cbind(Pitching_Ohtani$pfx_x, Pitching_Ohtani$pfx_z)
colnames(Pitching_Ohtani_pfx) <- c("pfx_x", "pfx_z")
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani[,c("pfx_x","pfx_z")], 5))
plot(Pitching_Ohtani[,c("pfx_x","pfx_z")], col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = viridis(5), pch = 19, cex = 2)
par(mfrow = c(1,2))
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani[,c("pfx_x","pfx_z")], 5))
plot(Pitching_Ohtani[,c("pfx_x","pfx_z")], col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = viridis(5), pch = 19, cex = 2)
par(mfrow = c(1,2))
(Pitching_Ohtani_pfx_cl <- kmeans(Pitching_Ohtani[,c("pfx_x","pfx_z")], 5))
plot(Pitching_Ohtani[,c("pfx_x","pfx_z")], col =Pitching_Ohtani_pfx_cl$cluster)
points(Pitching_Ohtani_pfx_cl$centers, col = viridis(5), pch = 19, cex = 2)
##* Ohtani's pfx_x V.S pfx_z
plot(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'CU'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'CU'], lty = 3, lwd = 1, ylim = c(-2,2.5), xlim = c(-2,2.3), col = 'red', pch = 5, xlab ='pfx_x', ylab = 'pfx_z', main ='pfx_x V.S pfx_z', cex.axis= 1.5, cex.lab= 1.5, cex.main =1.5 )
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FC'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FC'], lty = 3, lwd = 1, col = 'orange', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FF'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FF'], lty = 3, lwd = 1, col = 'gold1', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'FS'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'FS'], lty = 3, lwd = 1, col = 'limegreen', pch = 5)
lines(type = 'p', Pitching_Ohtani$pfx_x[Pitching_Ohtani$pitch_type == 'SL'], Pitching_Ohtani$pfx_z[Pitching_Ohtani$pitch_type == 'SL'], lty = 3, lwd = 1, col = 'cyan4', pch = 5)
legend("bottomleft", c("Curve", "Cutter", "Fast", "Split-finger", "Slider"), col = c("red", "orange", "gold1", "limegreen", "cyan4"), lty = 3, lwd =1, pch = 5)
par(mfrow = c(1,1))
iris
(iris2 <- cbind(iris, grouping = k3iris$cluster))
set.seed(900)
(k3iris<-kmeans(iris[,1:4],3))
(iris2 <- cbind(iris, grouping = k3iris$cluster))
?cbind
iris
(k3iris<-kmeans(iris[,1:4],3))
(iris2 <- cbind(iris, grouping = k3iris$cluster))
table(iris2$Species, iris2$grouping)
plot(Sepal.Length~Sepal.Width,data=iris, col=k3iris$cluster)
plot(Petal.Length~Petal.Width,data=iris, col=k3iris$cluster)
scatterplot3d(iris$Sepal.Length, iris$Petal.Length, iris$Petal.Width, color = k3iris$cluster, type = "h", lwd = 2, box = F, cex.axis = 0.5, main = "Thick Height Bars and No Box")
iris
scatter3d(iris$Sepal.Length,iris$Sepal.Width, iris$Petal.Length, color = k3iris$cluster)
scatter3d(iris$Sepal.Length,iris$Sepal.Width, iris$Petal.Length, color = k3iris$cluster, type = 'h', lwd = 2, cex.axis = 0.5, main = 'gogo')
scatter3d(iris$Sepal.Length,iris$Sepal.Width, iris$Petal.Length, color = k3iris$cluster, type = 'h', lwd = 2, cex.axis = 0.5, main = 'gogo')
scatterplot3d(iris$Sepal.Length,iris$Sepal.Width, iris$Petal.Length, color = k3iris$cluster, type = 'h', lwd = 2, cex.axis = 0.5, main = 'gogo')
scatterplot3d(iris$Sepal.Length,iris$Sepal.Width, iris$Petal.Length, color = k3iris$cluster, type = 'b', lwd = 2, cex.axis = 0.5, main = 'gogo')
scatterplot3d(iris$Sepal.Length,iris$Sepal.Width, iris$Petal.Length, color = k3iris$cluster, type = 'v', lwd = 2, cex.axis = 0.5, main = 'gogo')
scatterplot3d(iris$Sepal.Length,iris$Sepal.Width, iris$Petal.Length, color = k3iris$cluster, type = 'p', lwd = 2, cex.axis = 0.5, main = 'gogo')
scatterplot3d(iris$Sepal.Length,iris$Sepal.Width, iris$Petal.Length, color = k3iris$cluster, type = 'p', lwd = 5, cex.axis = 0.5, main = 'gogo')
help(hclust)
hc <- hclust(dist(USArrests), "ave")
plot(hc)
help(hclust)
(cut1 <- cutree(hc, k = 4))
(cut1 <- cutree(hc, k = 4))
(cut1 <- cutree(hc, k = 4))
(cut1 <- cutree(hc, k = 4))
plot(cut1)
hc <- hclust(dist(USArrests), "ave")
plot(hc)
plot(hc, hang = -1)
plot(hc, hang = -2)
(cut1 <- cutree(hc, k = 4))
plot(hc, hang = -3)
plot(hc, hang = 1)
plot(hc, hang = -1)
(cut1 <- cutree(hc, k = 10))
plot(cut1)
(cut1 <- cutree(hc, k = 2))
plot(cut1)
(cut1 <- cutree(hc, k = 10))
plot(cut1)
str(cut1)
hc <- hclust(dist(USArrests)^2, "cen")
hc
memb <- cutree(hc, k = 10)
plot(hc)
cent <- NULL
cent
memb
cent <- rbind(cent, colMeans(USArrests[memb == k, , drop = FALSE]))
for(k in 1:10){
cent <- rbind(cent, colMeans(USArrests[memb == k, , drop = FALSE]))
for(k in 1:10){
cent <- rbind(cent, colMeans(USArrests[memb == k, , drop = FALSE]))
}
go
d
d
d
d
heloo
hc <- hclust(dist(USArrests), "ave")
plot(hc)
plot(hc, hang = -1)
(cut1 <- cutree(hc, k = 10))
plot(cut1)
}
hc <- hclust(dist(USArrests)^2, "cen")
plot(hc)
memb <- cutree(hc, k = 10)
cent <- NULL
for(k in 1:10){
cent <- rbind(cent, colMeans(USArrests[memb == k, , drop = FALSE]))
}
cent
USArrests[memb == k, , drop = FALSE])
USArrests[memb == 1, , drop = FALSE]
?bind
?rbind
cent <- NULL
for(k in 1:10){
cent <- rbind(cent, colMeans(USArrests[memb == k, , drop = T]))
}
for(k in 1:10){
cent <- rbind(cent, colMeans(USArrests[memb == k, , drop = FALSE]))
}
cent
USArrests[memb == 1, , drop = FALSE]
?colMeans
hc1 <- hclust(dist(cent)^2, method = "cen", members = table(memb))
hc1
hc1 <- hclust(dist(cent)^2, method = "cen", members = table(memb))
hc <- hclust(dist(USArrests)^2, "cen")
hc1 <- hclust(dist(cent)^2, method = "cen", members = table(memb))
opar <- par(mfrow = c(1, 2))
plot(hc,  labels = FALSE, hang = -1, main = "Original Tree")
plot(hc1, labels = FALSE, hang = -1, main = "Re-start from 10 clusters")
for(k in 1:10){
cent <- rbind(cent, colMeans(USArrests[memb == k, , drop = FALSE]))
}
hc1 <- hclust(dist(cent)^2, method = "cen", members = table(memb))
table(memb)
hc1 <- hclust(dist(cent)^2, method = "cen", members = 10)
hclust(dist(cent)^2, method = "cen", members = table(memb))
cent
cent <- NULL
for(k in 1:10){
cent <- rbind(cent, colMeans(USArrests[memb == k, , drop = FALSE]))
}
hc1 <- hclust(dist(cent)^2, method = "cen", members = table(memb))
cent
hc1
opar <- par(mfrow = c(1, 2))
plot(hc,  labels = FALSE, hang = -1, main = "Original Tree")
plot(hc1, labels = FALSE, hang = -1, main = "Re-start from 10 clusters")
par(opar)
USArrests
USArrests[memb == 1]
USArrests[memb == 1, drop = FALSE]
USArrests[memb == k, , drop = FALSE]
USArrests[memb == k, , drop = FALSE])
colMeans(USArrests[memb == k, , drop = FALSE])
colMeans(USArrests[memb == 1, , drop = FALSE])
colMeans(USArrests[memb == 10, , drop = FALSE])
USArrests[memb == 1]
USArrests[memb == 10, , drop = FALSE]
colMeans(USArrests[memb == 10, , drop = FALSE])
cent2 <-null
for(k in 1:10){
cent2 <- rbind(cent2, USArrests[memb == k, , drop = FALSE])
}
cent2 <- NULL
for(k in 1:10){
cent2 <- rbind(cent2, USArrests[memb == k, , drop = FALSE])
}
cent2
USArrests[memb == 1, , drop = FALSE]
colMeans(USArrests[memb == 1, , drop = FALSE])
memb
wk8dat<-read.csv("week8dat.csv", header = T)
setwd("C:/Users/ppwan/!002. School related/006. Exploratory Data Analysis and Visualization/W008")
wk8dat<-read.csv("week8dat.csv", header = T)
wk8dat
wk8dat<-read.csv("randomdat2.csv", header = T)
h1<-hclust(dist(wk8dat[,c("var1","var2")]),"cen")
h1<-hclust(dist(wk8dat[,c("var1","var2")]),"cen")
plot(h1, hang = -1)
h1cut2<-cutree(h1,k=2)
plot(wk8dat[,c("var1","var2")], col = h1cut2)
h1<-hclust(dist(wk8dat[,c("var1","var2")]),"average")
plot(h1, hang = -1)
h1cut3<-cutree(h1,k=3)
plot(wk8dat[,c("var1","var2")], col = h1cut3)
##### Iris Dataset #####
iriss<-hclust(dist(iris[,1:4]), method = "single")
##### Iris Dataset #####
iriss<-hclust(dist(iris[,1:4]), method = "single")
plot(iriss)
irisc<-hclust(dist(iris[,1:4]), method = "complete")
plot(irisc)
irisa<-hclust(dist(iris[,1:4]), method = "ave")
plot(irisa)
opar <- par(mfrow = c(1, 3))
##### What happens if same distance #####
samedis<-seq(1,10)
samedis
hc <- hclust(dist(samedis), "complete")
plot(hc)
hc <- hclust(dist(samedis), "single")
plot(hc)
hc <- hclust(dist(samedis), "ave")
plot(ha)
samedis<-seq(1,10)
par(mfrow = c(1,3))
hc <- hclust(dist(samedis), "complete")
plot(hc)
hc <- hclust(dist(samedis), "single")
plot(hc)
ha <- hclust(dist(samedis), "ave")
plot(ha)
##### What happens if same distance #####
samedis<-seq(1,10)
par(mfrow = c(1,3))
hc <- hclust(dist(samedis), "complete", main = 'complete')
plot(hc)
hc <- hclust(dist(samedis), "single", main = 'single')
plot(hc)
ha <- hclust(dist(samedis), "ave", main = 'ave')
plot(ha)
samedis<-seq(1,10)
par(mfrow = c(1,3))
hc <- hclust(dist(samedis), "complete")
plot(hc, main = 'complete')
hs <- hclust(dist(samedis), "single")
plot(hs, main = 'single')
ha <- hclust(dist(samedis), "ave")
plot(ha, main = 'ave')
library(cluster)
??cluster
?cluster
data(votes.repub)
agn1 <- agnes(votes.repub, metric = "manhattan", stand = TRUE)
agn1
plot(agn1)
votes.repub
votes.repub
?agnes
op <- par(mfrow=c(2,2))
agn2 <- agnes(daisy(votes.repub), diss = TRUE, method = "complete")
plot(agn2)
## alpha = 0.625 ==> beta = -1/4  is "recommended" by some
agnS <- agnes(votes.repub, method = "flexible", par.meth = 0.625)
plot(agnS)
op <- par(mfrow=c(2,2))
agn2 <- agnes(daisy(votes.repub), diss = TRUE, method = "complete")
plot(agn2)
agnS <- agnes(votes.repub, method = "flexible", par.meth = 0.625)
plot(agnS)
par(op)
wk8dat<-read.csv("randomdat2.csv", header = T)
scatterplot3d(wk8dat$var1, wk8dat$var2, wk8dat$var3)
par(mfrow = c(1,1))
wk8dat<-read.csv("randomdat2.csv", header = T)
scatterplot3d(wk8dat$var1, wk8dat$var2, wk8dat$var3)
scatterplot3d(wk8dat$pred1, wk8dat$pred3, wk8dat$resp2)
scaled_resp2<-wk8dat$resp2/1000	## Get resp2 in thousands
par(mfrow = c(2,2))				## split my screen into 2x2
scaled_resp2<-wk8dat$resp2/1000
wk8dat<-read.csv("randomdat2.csv", header = T)
scatterplot3d(wk8dat$var1, wk8dat$var2, wk8dat$var3)
scatterplot3d(wk8dat$pred1, wk8dat$pred3, wk8dat$resp2)
par(mfrow = c(1,1))
wk8dat<-read.csv("randomdat2.csv", header = T)
scatterplot3d(wk8dat$var1, wk8dat$var2, wk8dat$var3)
scatterplot3d(wk8dat$pred1, wk8dat$pred3, wk8dat$resp2)
scaled_resp2<-wk8dat$resp2/1000	## Get resp2 in thousands
par(mfrow = c(2,2))				## split my screen into 2x2
scatterplot3d(wk8dat$pred1, wk8dat$pred3, scaled_resp2, main = "Default Plot")
scatterplot3d(wk8dat$pred1, wk8dat$pred3, scaled_resp2, highlight.3d = T, cex.axis = 0.5, main = "With Highlighting")
scatterplot3d(wk8dat$pred1, wk8dat$pred3, scaled_resp2, highlight.3d = F, cex.axis = 0.5, main = "With Highlighting")
scatterplot3d(wk8dat$pred1, wk8dat$pred3, scaled_resp2, highlight.3d = T, cex.axis = 0.5, main = "With Highlighting")
scatterplot3d(wk8dat$pred1, wk8dat$pred3, scaled_resp2, main = "Default Plot")
scatterplot3d(wk8dat$pred1, wk8dat$pred3, scaled_resp2, highlight.3d = T, cex.axis = 0.5, main = "With Highlighting")
scatterplot3d(wk8dat$pred1, wk8dat$pred3, scaled_resp2, highlight.3d = T, type = "h", cex.axis = 0.5, main = "With Highlighting and Height")
scatterplot3d(wk8dat$pred1, wk8dat$pred3, scaled_resp2, type = "h", lwd = 2, box = F, cex.axis = 0.5, main = "Thick Height Bars and No Box")
scatterplot3d(wk8dat$pred1, wk8dat$pred3, scaled_resp2, main = "Default Plot")
scatterplot3d(wk8dat$pred1, wk8dat$pred3, scaled_resp2, highlight.3d = T, cex.axis = 0.5, main = "With Highlighting")
scatterplot3d(wk8dat$pred1, wk8dat$pred3, scaled_resp2, highlight.3d = T, type = "h", cex.axis = 0.5, main = "With Highlighting and Height")
scatterplot3d(wk8dat$pred1, wk8dat$pred3, scaled_resp2, highlight.3d = T, type = "h", lwd = 2, box = F, cex.axis = 0.5, main = "Thick Height Bars and No Box")
par(mfrow = c(1,1))
model3d<-scatterplot3d(wk8dat$pred1, wk8dat$pred3, wk8dat$resp2,
pch = 16, highlight.3d = T, type = "h", box = F)
scatterplot3d(wk8dat$pred1, wk8dat$pred3, scaled_resp2, highlight.3d = T, type = "h", lwd = 2, box = F, cex.axis = 0.5, main = "Thick Height Bars and No Box")
model3d<-scatterplot3d(wk8dat$pred1, wk8dat$pred3, wk8dat$resp2,
pch = 16, highlight.3d = T, type = "h", box = F)
scatterplot3d(wk8dat$pred1, wk8dat$pred3, scaled_resp2, highlight.3d = T, type = "h", lwd = 2, box = F, cex.axis = 0.5, main = "Thick Height Bars and No Box")
scatter3d(wk8dat$pred1, wk8dat$pred3, wk8dat$resp2, revolutions = 2)
scatter3d(wk8dat$pred1, wk8dat$pred3, wk8dat$resp2)
scatter3d(wk8dat$pred1, wk8dat$pred3, wk8dat$resp2)
?scatter3d
USArrests
library(corrplot)		## install.packages("corrplot")
library(GGally)
library(scatterplot3d)
library(car)
library(rgl)
library(sf)
library(raster)
library(dplyr)		## note, dplyr gives you "mask" warnings
## this means two librarys have the same function name
## but the functions do different things
## to distinguish, use dplyr:__<<function>>__()
library(spData)		##spData gives us us_states below; use ?spData to see other available maps
library(spDataLarge)   ## install.packages("spDataLarge", repos = "https://geocompr.r-universe.dev")
library(tmap)
library(cluster)
library(ggplot2)
library(readxl)
library(datasets)
library(scatterplot3d)
tm_shape(us_states) + tm_fill()
tm_shape(world) + tm_polygons()
tm_shape(world) + tm_borders()
tm_shape(us_states2) + tm_polygons() +
tm_symbols(col = "black", border.col = "red", size = "Murder")
tm_shape(us_states2) + tm_polygons() +
tm_shape(us_states2) + tm_polygons()
tm_shape(us_states2) + tm_polygons() +
tm_symbols(col = "Assault", border.col = "red", size = "Murder", scale=2)
tm_shape(us_states2) + tm_polygons() +
tm_symbols(col = "black", border.col = "red", size = "Murder", scale = 2)
tm_shape(us_states2) + tm_polygons() +
tm_symbols(col = "black", border.col = "red", size = "Murder")
USArrests2 <- cbind(USArrests, NAME = row.names(USArrests))
tm_shape(world) + tm_polygons()
tm_shape(us_states2)
tm_shape(us_states2) + tm_polygons()
tm_shape(us_states2) + tm_polygons() +
tm_symbols(col = "black", border.col = "red", size = "Murder")
tm_shape(us_states2) + tm_polygons() +
tm_symbols(col = "Assault", border.col = "red", size = "Murder", scale=2)
tm_shape(us_states2) + tm_polygons() +
tm_symbols(col = "black", border.col = "red", size = "Murder", scale = 2)
?tm
tm_symbols()
?tm_symbols()
